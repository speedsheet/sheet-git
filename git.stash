<meta>index: tags<>
# The <#>Git<> SpeedSheet
<meta>index: none<>
<b>Find what you need, faster.<>

## Summary

<t>Repository - Create		<|><c>git init<>
Repository - Clone<|><c>git clone <v>url<><>

Branch - Create<|><c>git switch -c <v>branch_name<><>
Branch - Checkout<|><c>git switch <v>branch_name<><>
Branch - Delete<|><c>git branch -d <v>branch_name<><>
Branch - Fetch<|><c>git fetch<>
Branch - Push<|><c>git push <v>branch_name<><>

<com>Commits - View All<><col><c>git --no-pager log --pretty=oneline<><>

File - Diff To Branch<|><c>git diff <v>file_name<><>
Files - All Diffs To Branch<|><c>git diff<>

File - Add<|><c>git add <v>file_name<><>
File - Add All<|><c>git add .<>
File - Remove<|><c>git rm <v>file_name<><>
File - Remove All<|><c>git add -u<>
Files - Commit<|><c>git commit -m <v>message<><>

Environment Variable<|><c>HOME<><>



# Online Resources

###### Official Documents
<l>https://git-scm.com/docs<>

###### Commands
<l>https://git-scm.com/docs/git#_git_commands<>



# Git Fundamentals


## Environment Variable

<cb>HOME<>

Locates the global Git repository and globla Git settings.

Tip:
<c>HOME<> is used by many programs. Override it for git by creating a script or batch file to launch git and change the value of <c>Home<> there.


## Git Components


### Main Components

<card>Repository
Branches
Commits
Objects<>


### File Components

<card>Configuration File
Hooks
Object Database
References
Index<>

<t>Reference<|>Contains The Branches
Branch<|>Points To A Commit
Commit<|>Points To The Tree
Tree<|>Points To The Contents / Blob<>



## Recommended Standards


### Naming - Feature Branches

<cb>feature-<v>####<>-<v>summary-description<><>


Use lower hyphen case (lips case).



### Commit Message Format

<cb>"[<v>module name<>] <v>commit message<>."<>


The commit message should complete sentence "Commit will ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽".


Example:

<cb>"[Payments] retrieve payment type from the payment system."<>
@
@ comment



# Basic Commands
@
@ comm-only, command-only, commands-only, git


# Command - Help

<cb>git help <v>verb<><>

<cb>git <v>verb<> --help<>


Shows a list of available options.
@
@ git help, --help



### Command - Show Git Version

<cb>git version<>


Displays git version information.
@
@ git version, --version
@ display, view, get



# Repository
@
@ git, repositories, repo-only, repos-only, repository-only, repositories-only


### Repository - Create

<cb>git init<>

Creates a new git repository.

Initializes in the current directory.
Initializes in the GIT_DIR if the environment variable is set.
Creates an empty repository.
@
@ git init
@ new, initialize, project



### Repository - Create and Add Files

<cb>git init
git add -A
git commit -m "<v>Initial commit.<>"<>

Bash:

<cb>git init && git add -A && git commit -m "<v>Initial commit.<>"<>


Creates a new repository.
Adds all files into the repository and makes the first commit.
@
@ git init
@ new, initialize, project



### Repository - Status

<cb>git status<>


Displays the status of all files.
@
@ git status, project



# Remote Repository
@
@ git, repositories, repo-only, repos-only, repository-only, repositories-only, remote-only


### Remote Repository - Add To Local

<cb>git remote add <v>repo_name<> <v>repository_url<><>


Add a repository to the local git repository.


Example:

<cb>git remote add origin <v>https://github.com/speedsheet/sheet-git.git<>
git push -u origin <v>branch_name<><>
@
@ git remote add, repo url



### Remote Repository - Add With User Id, Password

<cb>git remote add <v>repo_name<> https://<v>user_id<>:<v>password<>@<v>repository_url<><>


Add a repository to the local git repository using the given user id and password.
@
@ using, name
@ git remote add



### Remote Repository - Add With User Id, Access Token

<cb>git remote add <v>repo_name<> https://<v>user_id<>:<v>access_token<>@<v>repository_url<><>


Add a repository to the local git repository using the given user id and an access token.
@
@ using, name, pass code, passcode, password, personal, pat
@ git remote add



### Remote Repository - Clone

<cb>git clone git://<v>repository_url<> [ <v>target_directory<> ]<>


Clones a remote repository into the current directory.
@
@ git clone
@ remote, download, url, create



### Remote Repository - Clone To Directory

<cb>git clone git://<v>repository_url<> <v>target_directory<><>


Clones a remote repository into the target directory.
@
@ git clone
@ remote, download, url, create



### Remote Repository - Clone Checking Out Branch

<cb>git clone git://<v>repository_url<> -b <v>branch_name<><>


Clones a remote repository and checks out the named branch.
@
@ git clone, -b
@ remote, download, url, create



### Remote Repository - Clone Using SSH

<cb>git clone git@<v>host.com<>:<v>repo/name<>.git<>


Clones a repository using SSH.

Requires:

<*>An SSH Key (created by you)
Public Key in the Repo's Account (the public part of your key)<>


Clone Example:

<cb>git clone git@github.com:speedsheet/sheet-git.git<>
@
@ using, name, with public ssh key
@ remote, download, url, create



### Remote Repository - Clone With User Id, Password

<cb>git clone https://<v>user_id<>:<v>password<>@<v>repository_url<> [ <v>target_directory<> ]<>


Clones a remote repository using a user id and password..
@
@ git clone
@ remote, name, using
@ remote, download, url, create



### Remote Repository - Clone With User Id, Access Token

<cb>git clone https://<v>user_id<>:<v>access_token<>@<v>repository_url<> [ <v>target_directory<> ]<>


Clones a remote repository into the current directory and links the two with an access token.

Use access token in place of a password.
@
@ git clone
@ remote, user name, using, pass code, passcode, password, personal, pat
@ remote, download, url, create



### Remote Repository - Fetch - Current, Tracked

<cb>git fetch<>


Updates local repository with the latest changes from the current remote repository.

Pulls in any new branches.
Updates existing branches.
@
@ git fetch



### Remote Repository - Fetch - All

<cb>git fetch -all<>


Fetches all remote repositories into the local repository.

Does not merge in any changes.
@
@ git fetch all remote repositories



### Remote Repository - Push All Branches

<cb>git push -u <v>repo_name<> --all<>


Pushes all local branches to a remote repo.
@
@ git push -u, --tags, repo



### Remote Repository - Push All Tags

<cb>git push -u <v>repo_name<> --tags<>


Pushes all local tags to a remote repo.
@
@ git push -u, --tags, repo



### Remote Repository - Remove

<cb>git remote remove <v>repository_name<><>

Removes link to a remote repository.
@
@ delete, unlink, link



### Remote Repository - Rename

<cb>git remote rename <v>old_name<> <v>new_name<><>


Renames the local name for a repository.
@
@ git remote rename
@ update, modify



### Remote Repository - Retrieve Latest

<cb>git fetch<>

Fetches the latest changes into the local copy of the remote repository.
@
@ git fetch
@ changes, updates, branches, get
@ from origin



### Remote Repository - Retrieve Latest / Remove Deleted Branches

<cb>git fetch --prune<>


Fetches the latest changes into the local copy of the remote repository.
Deletes any branches that have been removed on the remote server.
@
@ git fetch --prune
@ changes, updates
@ from origin



### Remote Repository - Set / Change Url

<cb>git remote set-url <v>repo_name<> <v>url<><>

Usage:

<cb>git remote set-url <v>name<> <v>new_url<><>

<cb>git remote set-url <v>name<> https://<v>user<>:<v>password<>@<v>new_url<><>


Sets or updates the url of a remote repository.

Use it to change to a different repository or to update the url if the existing repositery is renamed.


Example:

<cb>git remote set-url origin https://<v>user_name<>@<v>github.com/account/repo_name<><>
@
@ git remote set-url
@ remote repository, repo, renamed, update, modify



### Remote Repository - SSH - Setup

1. Create an SSH Key
2. Share the Public Key
3. Done


1. Create The SSH Key:

<in 2>See: <l "bash?q=ssh+create+key">Create an SSH Key<> (Bash SpeedSheet)

<cb>ssh-keygen -t rsa -b 4096 -C "<v>your_user_id<>@<v>your_local_host<>"<>

Creates:

<cb>$HOME/.ssh/id_rsa
$HOME/.ssh/id_rsa.pub<><>


2. Share The Public Key:

<in 2>Get this from your SSH files.
Add to the repository account.

From File: id_rsa.pub
Start with: ssh-rsa...<>

Adding on Github:

<in 2>Account -> Settings -> SSH and GPG Keys

<l>https://github.com/settings/keys<>
Click "New SSH Key"
Give it a name.
Paste in the public key.<>


3. Done

<in 2>Git automatically handles everything from here.
You can now clone repositories without a user id or password.<>
@
@ public, private key, create, new, passing



### Remote Repositories - List All 

<cb>git remote<>


Lists remote repositories.

Shows the names only.
@
@ git
@ print, show, view, names



### Remote Repositories - List All with Urls

<cb>git remote -v<>


Lists all remote repositories and their urls.
@
@ git
@ print, show, view



# Branch
<index>
@
@ branch-only, branches-only


### Branch - Switch To

<cb>git switch <v>branch_name<><>


Switch to an existing branch.

Note:
Checkout will fail if the current branch is 'dirty' (has changed files).
@
@ get



### Branch - Switch To (Alternative)

<cb>git checkout <v>branch_name<><>


Switches the files to a new branch.

Note:
Checkout will fail if the current branch is 'dirty' (has changed files).
@
@ get, checkout



### Branch - Switch To Remote Branch

<cb>git fetch
git switch <v>branch_name<><>


Fetches the latest changes and then checks out a remote branch.
@
@ fetch, checkout, switch
@ retrieve, get



### Branch - Checkout - Force

<cb>git reset <v>branch_name<><>


Force checks out a branch.


See: <go#>Branch - Reset - Hard<>



### Branch - Clean

<cb>git clean -fd<>


Removes empty directories, uncommitted new files.
@
@ -f, -d



### Branch - Clean - Pre-Check	

<cb>git clean -fdn<>


Shows what files will be deleted.
@
@ -f, -d, -n



### Branch - Commit

<cb>git commit<>

<cb>git commit -m "<v>Commit Message<>"<>


Commits any changes in staging into the repo.
@
@ -m



### Branch - Compare Against Branch

Compare To Current Branch:

<cb>git diff <v>branch_name<><>

Compare Two Branches:

<cb>git diff <v>branch1<>...<v>branch2<><>


<in><t><c>--stat<><|>Produces stats for the difference.
<c>--fileFilter<><|>Filter by file. eg '-- *.java'.<><>


If branch names do not work, use commit ids.<>



### Branch - Create New Branch

<cb>git switch -c <v>branch_name<><>
@
@ new, add, switch



### Branch - Create New Branch (Alternative)

<cb>git checkout -b <v>branch_name<><>
@
@ new, add, checkout



### Branch - Create Remote

<cb>git push <v>remote_repository<> <v>new_branch_name<><>


Creates the remote branch if it doesn't exist and then pushes the update.

This is the same regular push command you use to send updates.


Example:

<cb>git push origin master<>
@
@ new, add, push



### Branch - Delete

<cb>git branch -d <v>branch_name<><>


Note: branch is deleted from view.
Note: Safe: will not delete if the branch is not reachable from another branch.
@
@ remove



### Branch - Delete (Force)

<cb>git branch -D <v>branch_name<><>


Force deletes a branch. No safety check. The data stays in the database though.
@
@ remove



### Branch - Delete (Remote)

<cb>git push --delete <v>remote_repository_name<> <v>branch_name<><>

Old Syntax:

<cb>git push <v>remote_repository_name<> :<v>branch_name<><>


Note: Deletes a branch on the origin.
@
@ remove



### Branch - Delete Last Commit

This will delete the last commit, reset all current files back to the previous commit!


2 Steps:

1: Delete Local Repository Commit:

<cb>git reset --hard HEAD~1<>

2: Force Push Delete To Central Repository:

<cb>git push origin +master<>
@
@ remove



### Branch - Delete Last Commit, Keep Current Files

<cb>git reset HEAD~1<>

This will delete the last commit but keep all files in the file system as is.
@
@ remove



### Branch - Files - List Tracked by Git

<cb>git ls-files<>


Lists all files tracked in the current git repository.
@
@ get, view, show, print



### Branch - Get Branch Name

<cb>git status | grep On | sed -e 's/On branch //g'<>


Returns the branch name only.
@
@ get, view, show, print



### Branch - Get Commit Hash

<cb>git log | head -n 1 | sed -e 's/commit //g'<>


Returns the commit hash only.
@
@ get, view, show, print



### Branch - Merge

<cb>git merge <v>branch_name<><>


Merges <v>branch_name<> into the current checked out branch.

If there are conflicts, git will pause the merge until those conflicts are resolved.
@
@ combine



### Branch - Merge Abort

<cb>git merge --abort<>


Aborts the current merge. 

This restoring all files to their original pre-merge states.
@
@ --abort



### Branch - Merge - Fix With Tool

<cb>git mergetool<>


Opens the merge tool configured in the git .gitconfig file.
Each file is passed successively.
@
@ combine, resolve, conflicts



### Branch - Merge - Show Merged Branches

<cb>git branch --merged<>


Shows all merged branches in this branch.
Useful for listing what features are included in branch, esp main branch.
@
@ combine
@ view, print



### Branch - Merge - Show Non-Merged Branches

<cb>git branch --no-merged<>


Useful for listing what features haven't beer merged into the branch.
@
@ combine
@ view, print



### Branch - Pull

<cb>git pull <v>branch_name<><>


Retrieves all commits from a remote repository into the current branch.



### Branch - Push to Remote

<cb>git push <v>remote_repository<> <v>branch_name<><>


Pushes the commits from your local branch to a remote repository branch.

Will create the branch if it doesn't exist.
Will fail if the remote branch has commits the local branch is missing.



### Branch - Push to Remote - Force

<cb>git push -f <v>remote_repository<> <v>branch_name<>
git push --force <v>remote_repository<> <v>branch_name<><>


Force pushes all commits from your local branch to a remote repository branch.

Overwrites the history of the remote branch regardless of any new commits in that remote branch.

⚠️ Use With Caution!
@
@ -f, --force



### Branch - Push to Remote - Force With Lease

<cb>git push --force-with-lease <v>remote_repository<> <v>branch_name<><>


Force pushes all commits from your local branch to a remote repository branch but with one safety check.

Will fail if new commits are found in the remote branch since your last fetch.

@
@ -f, --force



### Branch - Rebase

<cb>git rebase <v>target_branch<><>


Rebases the current branch off <v>target_branch<>.



### Branch - Rebase - Abort

<cb>git rebase --abort<>
@
@ reset, stop, clear, cancel
@ --abort



### Branch - Rebase - Continue

<cb>git rebase --continue<>
@
@ --continue



### Branch - Rebase - Full

<cb>git checkout master
git pull
git checkout feature-branch
git rebase master<>

If Merge Conflict:

<cb>git mergetool
git rebase --continue<>

Reset:

<cb>git rebase --abort<>

Complete:

<cb>git push -f<>



### Branch - Rename

The only way is to delete the old branch and then re-create with the new name:

3 Steps:

1: Create Branch With Correct Name:

<cb>git branch -m [ <v>old_branch<> ] <v>new_branch<><>

2: Delete Original Branch:

<cb>git push --delete <v>remote_repository<> <v>old_branch_name<><>

3: Push New Branch To Remote

<cb>git push <v>remote_repository<> <v>new_branch<><>



### Branch - Reset - Hard

<cb>git reset --hard<>


Note: Deletes all changes.
Note: Reverts to the last proper commit (before changes or merge).



### Branch - Reset - Hard (II)

<cb>git reset --hard <v>commit_name<><>

Note: Just like normal hard reset but reverts to a particular commit point.



### Branch - Update - From

See: Branch - Merge



### Branches - List All

<cb>git branch<>


Note: Lists active branch in a different colour.

	-a 	// List all local and remote branches
	-r	// List all remote branches.
@
@ show, print, view



### Branches - List All with same hash

<cb>git branch --contains <v>hash_code<><>


Lists all the branches in your local repository with that hash code.
@
@ hashcode, hash code
@ show, print, view



# Commit
@
@ commit-only, commits-only


### Commit - Clear

<cb>git reset --soft HEAD~1<>

Clears files in the commit but keeps your work.



### Commit - Checkout

<cb>git checkout <v>commit-hash<><>

Checks out the commit with the given hash.
@
@ git checkout
@ get, retrieve, hash, with, using



### Commit - Commit All Changed Files

<cb>git commit -a -m "<v>commit message<>"<>

Adds all tracked and changed files and commits them to the repository.

Untracked files will not be added.
Commits changed files without having to stage them.
Staged files are committed too.
@
@ git commit -a -m
@ add, changes, changed, modified, repository, save, to



### Commit - Current Commit - Get Hash

Short Hash:

<cb>git rev-parse --short HEAD<>

Full Hash:

<cb>git rev-parse HEAD<>
@
@ head, rev-parse, --short



### Commit - Delete - Already Pushed

<cb>git reset --hard <v>commit_to_reset_to<>
git push origin HEAD --force<>


Deletes a commit after it has been pushed.


Example - Erase last pushed commit:

<!>NOT TESTED!<>

<cb>git reset --hard <v>HEAD~1<>
git push origin HEAD --force<>
@
@ when, after



### Commit - Ignore - Files

Create File:

<cb>.gitignore<>


Files listed in .gitignore will be ignored by Git.


See: <l "?q=.gitignore+reference">.gitignore Reference<> (below)



### Commit - Ignore - File chmod Changes

<cb>git config core.fileMode false<>

Tells git to ignore file permissions changed with chmod.

By default, git will update and save file permissions with the file.



### Commit - Message - Change

<cb>git commit --amend -m "<v>New message.<>"<>


Changes the text of the last commit message.
@
@ comment, text, replace, redo, update, modify, ammend, edit
@ git commit --amend



### Commit - View Branch Name

<cb>git status | grep On | sed -e 's/On branch //g'<>
@
@ info, information, display, get, print, show, view
@ git status



### Commit - View Commit Hash

<cb>git log -1 --format="%H"<>
@
@ info, information, display, get, print, show, view
@ git log -1 --format=



### Commit - View Commit Hash (Alternative)

<cb>git log -1 | head -n 1 | sed -e 's/commit //g'<>
@
@ info, information, display, get, print, show, view
@ git log -1, head, sed



### Commit - View Commit Hash Short

<cb>git log --pretty=format:'%h' -n 1<>
@
@ info, information, display, get, print, show, view
@ git log --pretty=format:



### Commit - Show Commit Date

<cb>git show -s --format="%ci"<>
@
@ info, information, view, get
@ git show -s



### Commit - Show File Changes

<cb>git diff-tree --no-commit-id --name-only -r <v>commit<><>
@
@ display, view, get
@ git diff-tree --no-commit-id --name-only



### Commit - Show File Changes - Last Commit

<cb>git diff-tree --no-commit-id --name-only -r HEAD<>
@
@ display, view, get
@ git diff-tree --no-commit-id --name-only



### Commit - Squash

<cb>git rebase -i HEAD~<v>number_of_commits_back<><>

In Editor Mark:

<card>1st Commit - 'pick'
All Other Commits - 's'

Ignore the comment.<>

In Next Editor:

<card>Edit commit message.
Delete all other uncommented lines.<>


Squashes multiple commits into one single commit.

Comments are ignored (lines starting with #)
@
@ git rebase -i



### Commit - Squash Last Commit

<cb>git rebase -i HEAD~<v>1<><>

<m>Test and confirm this works.<>
@
@ git rebase -i



### Commits - Show	

<cb>git log<>

Shows up to the current commits.
@
@ git log
@ show, view, display, list, history, past, logs



### Commits - Show All	

<cb>git log --all<>

Shows all commits.
@
@ git log --all
@ show, view, display, list, history, past, logs



### Commits - View All, Formatted

<cb>git log --pretty=format:"%h : %an : %ar : %s"<>

<table><col><c>%an<><><col>User Name<>
<col><c>%ar<><><col>Update Date/Time<>
<col><c>%h<><><col>Hash Code - Short<>
<col><c>%s<><><col>Comment (1st line only)<><>


View all commits with their user, date, hash code and commit message.

":" is not important. It is there to help formatting.


Example:

<cb>75a7410 : your_name_here : 22 minutes ago : [help] shows 'next' option.
a109ab8 : your_name_here : 30 minutes ago : [cli arguments] accepts 'best-match' parameter.
62b9e2f : your_name_here : 3 hours ago : [Reader] accepts single quote multi-line values.<>
@
@ git log --pretty
@ TODO, INCOMPLETE
@ show, view, display list, history, past, logs



### Commits - View All, Short

<cb>git log --pretty=oneline<>


Shows the git history with each commits complete ID and message.


Example:

<cb>75a7410f486fac2a1bc99291a7d6af6c9091e5e4 (HEAD, tag: 1.0.14) [help] shows 'next' option.
a109ab82d86949716c2e44e95700a8f0608f6533 [cli arguments] accepts 'best-match' parameter.
62b9e2f1aa343d9077bc4627d2fbc27b3a534659 [Reader] accepts single quote multi-line values.<>
@
@ git log --pretty
@ TODO, INCOMPLETE
@ show, view, display list, history, past, logs



### Commits - View All, Short, Formatted

<cb>git log --all --graph --decorate --pretty=oneline --abbrev-commit<>


Shows the git history with each commits ID hash and message.


Example:

<cb>* 75a7410 (HEAD, tag: 1.0.14) [help] shows 'next' option.
* a109ab8 [cli arguments] accepts 'best-match' parameter.
* 62b9e2f [Reader] accepts single quote multi-line values.<>
@
@ git log
@ TODO, INCOMPLETE
@ show, view, display list, history, past, logs



### Commits - View In Color

<cb>git log --decorate<>


Cyan	- HEAD
Green	- Tag
Red		- Removed Branches
Yellow	- Hash Code



### Commits - View In Reverse Order

<cb>git log --reverse<>


Shows up to the current commits in reverse order.
@
@ git log, --reverse, backwards
@ show, view, display, list, history, past, logs



### Commits - View Differences

<cb>git diff --stat <v>old_commit<>..<v>new_commit<><>


Show the differences between 2 commits.

Shows the files, the line count added and removed from each between the commits.
@
@ by files, line counts, added, removed
@ display, get, print, show, view, compare, comparison
@ git diff --stat



### Commits - View Differences - Lines Added, Removed

<cb>git log --pretty=tformat:"%h - %s" --shortstat<>


Shows a history of lines added and removed between the commits.
@
@ git log --shortstat --pretty, between commits
@ display, get, print, show, view, compare, comparison



### Commits - View Differences - Lines Added, Removed - Between 2 Commits

<cb>git log --numstat --pretty="%H" <v>old_commit<>..<v>new_commit<> | awk 'NF==3 {plus+=$1; minus+=$2} END {printf("+%d, -%d\n", plus, minus)}'<>


Shows the number of lines added and removed between the commits.

Shows nothing else.


Example Output:

<cb>+1564, -788<>
@
@ git log --numstat --pretty
@ display, get, print, show, view, compare, comparison



### Commits - View Differences - Machine Readable

<cb>git diff --numstat <v>old_commit<>..<v>new_commit<><>


Shows the files, the line count added and removed from each between the commits.

Displays in an easy format that can be digested by a program.
@
@ by files, line counts, added, removed
@ display, get, print, show, view, compare, comparison
@ git diff --numstat



### Commits - View Differences - Summary Only

<cb>git diff --shortstat <v>old_commit<>..<v>new_commit<><>


Shows the files, the line count added and removed from each between the commits.


Example Output:

<cb>30 files changed, 580 insertions(+), 141 deletions(-)<>
@
@ by files, line counts, added, removed
@ display, get, print, show, view, compare, comparison
@ git diff --shortstat



# Staging Area
@
@ commit


### Staging Area - Add File

<cb>git add <v>file_name<><>


Adds a file to the staging area.
@
@ git add
@ new, changes, changed, modified, to



### Staging Area - Add All Changed Files

<cb>git add *<>


Adds all modified files to the staging area.''

Will not add special files (eg. any file starting with '.'). These must be added explicitly.
@
@ git add *
@ changes, changed, modified, new, to



### Staging Area - Add Deleted File

<cb>git rm <v>file_name<><>


Adds the deletion of a file into the staging are.

This file will be removed from the final commit.
@
@ rm



### Staging Area - Add All Deleted Files

<cb>git add -u<>


Adds the deletion of files into the staging are.

These files will be removed from the final commit.
@
@ add -u



### Staging Area - Remove From Staging

<cb>git restore --staged <v>file_name<><>

Equivalent Command:

<cb>git reset -- HEAD <v>file_name<><>


Removes a file from the staging area.
@
@ git reset -- HEAD
@ git restore --staging
@ delete from, modified, changed



### Staging Area - Remove All From Staging / Reset

<cb>git reset<>


Removes all files from the staging area.
@
@ git reset
@ delete from, modified, changed, clear



### Staging Area - Commit To Branch

<cb>git commit<>

Usage:

<cb>git commit -m "<v>Commit message.<>"<>


Commits the changes into a new commit.
@
@ git commit -m
@ add, changes, create, new, save



# Stashes
@
@ stashed


### Stash - Stash Code

<cb>git stash<>


Stashes code into the stash.
@
@ git stash
@ add, save



### Stash - Stash Code With Message

<cb>git stash push -m "<v>message<>"<>


Stashes code into the stash.
@
@ git stash
@ add, save



### Stash - Restore Code

<cb>git stash pop<>


Restores code from the stash.
@
@ git stash pop
@ restore from



### Stashes - List

<cb>git stash list<>

Lists all stashes in the stash stack.



# Tags


### Tag - Checkout

<cb>git checkout <v>tag_name<><>


Checks out a commit with the given tag name.
@
@ checkout, commit



### Tag - Create

Create Lightweight Tag:

<cb>git tag <v>tag_name<><>

Tag a Commit:

<cb>git tag <v>tag_name<> <v>commit_id<><>

Annotate Tag:

<cb>git tag -a <v>tag_name<> -m "<v>commit message<>"<>


Attaches the tag to a commit.
@
@ new, assign, add
@ git tag -a -m



### Tag - Delete

<cb>git tag -d <v>tag_name<><>


Deletes the tag.
@
@ remove
@ git tag -d



### Tag - View

<cb>git show <v>tag_name<><>


View the file changes for the given tag.
@
@ display, get, print, show, view
@ git show, changes



### Tag - View - Closest

<cb>git describe --abbrev=0<>


Shows the closest tag.
@
@ display, get, print, show, view
@ git describe --abbrev



### Tag - View - Current

<cb>git describe --tags<>


Shows the current tag.
@
@ display, get, print, show, view, commit
@ git describe --tags



### Tags - List All

<cb>git tag<>


Lists all tags.
@
@ display, get, print, show, view
@ git tag



### Tags - List All - Tag, Commit, Message

<cb>git for-each-ref --sort=taggerdate --format '%(refname:short), %(objectname:short), %(contents:subject)' refs/tags<>



### Tags - List / Filtered

<cb>git tag -l <v>pattern<><>


List all tags matching the pattern.
@
@ display, get, print, show, view
@ git tag -l



# Worktrees
@
@ worktree-only, worktrees-only, git


### Worktree - Create

<cb>git worktree add <v>worktree_directory<> <v>branch_name<><>


Creates a directory and checks out the named branch.

The directory should be outside the git project root directory. Do not nest!
@
@ add, new



### Worktree - Checkout Branch

<cb>git switch <v>branch_name<><>


Switches to a different branch.

The command must be run from inside the worktree directory.
Use the normal branch commands when working with worktree branches.
@
@ switch to



### Worktree - Remove

<cb>git worktree remove <v>worktree_directory<><>


Removes a worktree directory.
@
@ delete



### Worktrees - List

<cb>git worktree list<>


Lists all worktrees for the current git project.
@
@ show, print, display



# Configuration
@
@ git
@ conf-only, config-only, configure-only, configuration-only, setting-only, settings-only


## Config - Operations


### Config - Setting - Add

<cb>git config <v>setting_name<> <v>value<><>

Sets a config value.

Same as update.
Defaults to local.
@
@ create, set, entry, value


### Config - Setting - Add Local

<cb>git config --local <v>setting_name<> <v>value<><>

Sets a config value.

Local is the default location
@
@ create, set, entry, value, --local


### Config - Setting - Add Global

<cb>git config --global <v>setting_name<> <v>value<><>

Sets a config value.
@
@ create, set, entry, value, --global


### Config - Setting - Get

<cb>git config --get <v>setting_name<><>

Returns the value of the setting.
@
@ value, view, show, print


### Config - Setting - Delete

<cb>git config --unset <v>setting_name<><>

Delete a setting.
@
@ unset, remove
@ --unset



### Config - Setting - Update

<cb>git config <v>setting_name<> <v>value<><>

Sets a config value.

Defaults to local.
@
@ set



### Config - Settings - View All

<cb>git config --list<>


Shows all settings.
@
@ --list
@ show, print, get



### Config - Settings - View All Local

<cb>git config --list --local<>


Shows all settings.
@
@ --list, --local
@ show, print, get



### Config - Settings - View All Global

<cb>git config --list --global<>


Shows all settings.
@
@ --list, --global
@ show, print, get


## Config Settings


### Config - Credentials - Use Local Credentials Only

<cb>git config --local credential.helper ""<>

Use local credentials over global ones.

<m>(Mac only?)<>
@
@ password, passcode, pass code, access codes, login



### Config - Editor - Set

<cb>git config --global core.editor "<v>text_editor_command<>"<>



### Config - Ignore - File Permissions

<cb>git config core.fileMode false<>



### Config - Password - Check Cache

Mac Only:

<cb>git credential-osxkeychain<>

If installed, reports "Usage: git credential-osxkeychain <get|store|erase>"



### Config - Password - Reset / Clear

Mac Only:

<cb>git config --global credential.helper osxkeychain<>



### Config - Password - Set Password Cache

<cb>git config --global credential.helper cache<>

Mac Only:

<cb>git config --global credential.helper osxkeychain<>



### Config - Set Email

Local Setting:

<cb>git config user.email <v>email@address.com<><>

Global Setting:

<cb>git config --global user.email <v>email@address.com<><>
@
@ create account
@ git config --global user.email 



### Config - Set Name

Local Setting:

<cb>git config user.name "Name"<>

Global Setting:

<cb>git config --global user.name "<v>Name<>"<>
@
@ create account
@ git config --global
@ user.name



### Config - Set Merge Tool

<cb>git mergetool -t <v>merge_tool_name<><>


Example:

Mac / KDiff3

<cb>git config --global mergetool.kdiff3.path /Applications/kdiff3.app/Contents/MacOS/kdiff3<>
@
@ git mergetool -t


## Config - How To


### Config - Access Token - Create

From github account:

Link:

<cb><l>https://github.com/settings/tokens<><>

Or

<cb>Profile						<#>(Top Right)<>
Settings					<#>(Menu, Bottom)<>
Developer Settings			<#>(Left Nav)<>
Personal access tokens		<#>(Left Nav)<>

Generate new token			<#>(Button)<><>
@
@ new, add
@ key, code, passcode, pass code, pat, personal, login, password



# Commands


### Directory - Untrack

<cb>git rm --cached -r <!>(? what here? File name? Not directory name?)<> <v>file_name<><>



### Directories - Remove Empty

<cb>git clean -fd<>


See Also: Branch - Clean



### File - Add, Stage

<cb>git add <v>file_name<><>

<cb>git add *<>


Adds all files to the repository (staging).
Note: After this, the files can be deleted and they will still be in the repository.
@
@ clear, delete
@ git, clean -fd



### File - Add, Silence Warnings

<cb>git config advice.addIgnoredFile false<>


Silences warnings about files that are ignored by .ignore
@
@ .ignore config advice.addignoredfile, ignored files



### File - Changes - View

<cb>git diff <v>file_name<><>

View the changes between the current file and the last commit.
@
@ get, view, show, print, contents, last commit, latest commit
@ git diff, differences, compare



### File - Changes - View All

<cb>git diff<>

View all the changes between the current files and the last commit.
@
@ get, view, show, print, current, files, last commit, latest commit
@ git diff, differences, compare



### File - Revert to Head

<cb>git checkout <v>file_name<><>

<cb>git checkout <v>branch_name<> <v>file_name<><>
@
@ reset



### File - Remove From Repo

<cb>git rm --cached <v>file_name<><>

Remove but do not delete file.
@
@ delete
@ git rm --cached



### File - Remove From Repo, Delete

<cb>git rm <v>file_name<><>

Remove and delete file.
@
@ git rm



### File - Remove From Repo, Delete, Force

Remove and Delete File:

<cb>git rm -f <v>file_name<><>

Removes and deletes the file.

Forces the removal no matter what state it is in.
@
@ git rm -f



### File - Rename

<cb>git mv <v>file_name<> new<v>file_name<><>



### File - Status

<cb>git status -s<>

Note: Displays the status of files that have changed.
@
@ get, view, show, print



### File - Untrack

<cb>git rm --cached <v>file_name<><>
@
@ remove



# How To


### Alias - Create Git Command / Alias 

<cb>git config --global alias.<v>name<> "<v>git-command<>"<>


Defines an alias for a git command.


Example:

<in>Alias pr to "<c>pull --rebase<>"<>

<cb>git config --global alias.<v>pr<> "<v>pull --rebase<>"<>
@
@ config --global, alias.



### Alias - Delete

<cb>git config --global --unset alias.<v>name<><>


Deletes an alias.
@
@ --unset, --global, alias.



### Aliases - List

<cb>git config --get-regexp alias<>


Lists all aliases.
@
@ --get-regexp alias, config



### Display To Console

<cb>git --no-pager <v>...<><>


Displays the current output directly to the screen.

<c>--no-pager<> MUST be directly after <c>git<>.

By default Git sends log and diff output to <c>less<> so results can be scrolled through.
@
@ log, diff, print only, show, view, set viewer
@ to screen, no less, change, redirect
@ --no-pager


### Display To Console - Configure For all

<cb>git config --global core.pager cat<>


Displays all output directly to the screen.

Use <c>config core.pager<> and set it to "<c>cat<>" or "<c>less -iXFR<>" to always show to the screen.

By default Git sends log and diff output to <c>less<> so results can be scrolled through.
@
@ log, diff, print only, show, view, settings
@ to screen, no less, change, redirect, directly
@ --no-pager, core.pager



# Reference - Config Settings
@
@ get, show


### Setting - credential.helper

<cb>credential.helper<>

<cb>git config --get credential.helper<>

Location / cache to store user credentials.



### Setting - push.default

<cb>push.default<>

<cb>git config --get push.default<>

Sets Push mode (simple | matching). Prefer simple.



### Setting - remote.origin.url

<cb>remote.origin.url<>

<cb>git config --get remote.origin.url<>



### Setting - user.email

<cb>user.email<>

<cb>git config --get user.email<>

Sets commit user email



### Setting - user.name

<cb>user.name<>

<cb>git config --get user.name<>

Sets commit user name
@
@ user id, username



# Reference - .gitignore
@
@ Git Ignore, GitIgnore, exclude files



### .gitignore - Sample file

<cb><#># Sample File<>
<#># This is a comment<>

ignore_this_file.txt
*.txt
folder/<>



### .gitignore - Comments

In .gitignore:

<cb><#># Git Comment<><>



### .gitignore - Ignore Directory

In .gitignore:

<cb><v>directory<>/<>


Ignores this directory.



### .gitignore - Ignore Root Directory

In .gitignore:

<cb>/<v>directory<>/<>


Ignores this directory if in the project root directory.



### .gitignore - Ignore File

In .gitignore:

<cb>**/<v>file_name<><>


Ignores the matching file.



### .gitignore - Ignore File in Root Directry

In .gitignore:

<cb><v>file_name<><>


Ignores the matching file.



### .gitignore - Ignore File with Wildcards

In .gitignore:

<cb>*<v>file_name<><>


Ignores the matching files.


Example:

<cb>*.pyc<>



# Reference - Git Configuration Files


### Config File - Global

<cb><v>home_directory<>/.gitconfig<>


### Config File - Local

<cb>.git/config<>


### Configuration - Precedence

Local settings supercede Global settings.



# Reference - Git Log Properties

<cb>%H: commit hash
%h: abbreviated commit hash
%T: tree hash
%t: abbreviated tree hash
%P: parent hashes
%p: abbreviated parent hashes
%an: author name
%aN: author name (respecting .mailmap, see git-shortlog(1) or git-blame(1))
%ae: author email
%aE: author email (respecting .mailmap, see git-shortlog(1) or git-blame(1))
%ad: author date (format respects --date= option)
%aD: author date, RFC2822 style
%ar: author date, relative
%at: author date, UNIX timestamp
%ai: author date, ISO 8601-like format
%aI: author date, strict ISO 8601 format
%cn: committer name
%cN: committer name (respecting .mailmap, see git-shortlog(1) or git-blame(1))
%ce: committer email
%cE: committer email (respecting .mailmap, see git-shortlog(1) or git-blame(1))
%cd: committer date (format respects --date= option)
%cD: committer date, RFC2822 style
%cr: committer date, relative
%ct: committer date, UNIX timestamp
%ci: committer date, ISO 8601-like format
%cI: committer date, strict ISO 8601 format
%d: ref names, like the --decorate option of git-log(1)
%D: ref names without the " (", ")" wrapping.
%e: encoding
%s: subject
%f: sanitized subject line, suitable for a filename
%b: body
%B: raw body (unwrapped subject and body)
%N: commit notes
%GG: raw verification message from GPG for a signed commit
%G?: show "G" for a good (valid) signature, "B" for a bad signature, "U" for a good signature with unknown validity, "X" for a good signature that has expired, "Y" for a good signature made by an expired key, "R"
           for a good signature made by a revoked key, "E" if the signature cannot be checked (e.g. missing key) and "N" for no signature
%GS: show the name of the signer for a signed commit
%GK: show the key used to sign a signed commit
%gD: reflog selector, e.g., refs/stash@{1} or refs/stash@{2 minutes ago}; the format follows the rules described for the -g option. The portion before the @ is the refname as given on the command line (so git log
           -g refs/heads/master would yield refs/heads/master@{0}).
%gd: shortened reflog selector; same as %gD, but the refname portion is shortened for human readability (so refs/heads/master becomes just master).
%gn: reflog identity name
%gN: reflog identity name (respecting .mailmap, see git-shortlog(1) or git-blame(1))
%ge: reflog identity email
%gE: reflog identity email (respecting .mailmap, see git-shortlog(1) or git-blame(1))
%gs: reflog subject
%Cred: switch color to red
%Cgreen: switch color to green
%Cblue: switch color to blue
%Creset: reset color
%C(...): color specification, as described under Values in the "CONFIGURATION FILE" section of git-config(1); adding auto, at the beginning will emit color only when colors are enabled for log output (by
           color.diff, color.ui, or --color, and respecting the auto settings of the former if we are going to a terminal).  auto alone (i.e.  %C(auto)) will turn on auto coloring on the next placeholders until the color is
           switched again.
%m: left (\<), right (>) or boundary (-) mark
%n: newline
%%: a raw %
%x00: print a byte from a hex code
%w([\<w>[,\<i1>[,\<i2>]]]): switch line wrapping, like the -w option of git-shortlog(1).
%\<(\<N>[,trunc|ltrunc|mtrunc]): make the next placeholder take at least N columns, padding spaces on the right if necessary. Optionally truncate at the beginning (ltrunc), the middle (mtrunc) or the end (trunc) if
           the output is longer than N columns. Note that truncating only works correctly with N >= 2.
%\<|(\<N>): make the next placeholder take at least until Nth columns, padding spaces on the right if necessary
%>(\<N>), %>|(\<N>): similar to %\<(\<N>), %\<|(\<N>) respectively, but padding spaces on the left
%>>(\<N>), %>>|(\<N>): similar to %>(\<N>), %>|(\<N>) respectively, except that if the next placeholder takes more spaces than given and there are spaces on its left, use those spaces
%>\<(\<N>), %>\<|(\<N>): similar to % \<(\<N>), %\<|(\<N>) respectively, but padding both sides (i.e. the text is centered) -%(trailers): display the trailers of the body as interpreted by git-interpret-trailers(1)<>
@
@ format codes, letters, print


# Symbols


### Symbol @

An alias for <c>HEAD<>.



# Strategies
@
@ strategy, patterns


### Keep Up To Date

<cb>git pull --rebase<>

If it fails <sup><#>1<><>:

<cb>git rebase --abort
git pull<>

1 - Run these two commands.
@
@ pull



### Push

If No Merge Conflicts:

<*>Amend
Force Push With Lease<>

If Conflicts:

<*>Rebase
Force Push With Lease<>



### Merge - Resolve Conflicts

<*>Fix Files with Conflicts
Re-add to Staging
Re-run tests (optional but recommended)
Commit to Complete<>


Check which files are conflicted:

<cb>git status<>

Fix the conflicts in these files.
Conflicts are marked within the files with <go "?conflict markers#Conflict Markers">conflict markers<>.

Add to Staging:

<cb>git add <v>conflicted_file_1<>
git add <v>conflicted_file_2<><>

Complete Commit:

<cb>git commit<>


Recommended Video: <l https://www.youtube.com/watch?v=DloR0BOGNU0>"Never fear merge conflicts again - git merge/pull tutorial"<>
By <l https://www.youtube.com/@philomatics/videos>Philomatics<>, 5 mins
@
@ fix



### Squash - When To Squash

<*>When your branch will be deleted when you are done.
When it is a long lived branch (development -> main).<>



# Acronyms
@
@ glossary, glossary-only, acronyms-only, acronym-only


### PAT
Personal Access Token



### SC
Secure Copy


### SCM
Software Configuration Masagement



### SCP
Secure Copy Protocol



### SHA
Secure Hash Algorythm



# Terms
@
@ glossary, glossary-only, terms-only, term-only, define-only


### Amend
To change the message on the most recent commit.
@
@ ammend


### Branch
A pointer to a commit.



### Commit
A commit is a snapshot of the project.

Commits contain these fields: Tree (pointer to the tree); Parent (pointer to the previous commit); Author; Comment.



### Commit (Action)
Committing files, takes files that have been marked as staged and commits a snapshot to the local repository.



### Conflict Markers
Marks where git found a conflict in a file during a merge.

Conflicts are anywhere git couldn't automatically merge file changes into an existing file.

Shows both the local state (top half) and external state (bottom half)


<cb>\<\<\<\<\<\<\< <v>Head<>
<v>... your code ...<>
=======
<v>... incoming code ...<>
>>>>>>> <v>main<><>

(for <c>git merge <v>main<><>)
@
@ \<\<\<\<\<\<\<, =======, >>>>>>>



### Content
Git stores content by first creating a name and then compressing the data.

The name is the SHA1 digest hash for the data. The data is stored in the .git/objects directory. The first two letters of the name/hash are the subdirectory and the remainder is the file name. The content has built in security features. The SHA1 hash will detect any flaws in the content. Git checks the contents against the hash at almost every point. Content is immutable.



### Fast Forward (Merge)
This is the simplest type of merge. Effectively, the current branch's pointer is updated to point to the same commit as the branch being merged in.

The current branch must be a direct ancestor of the updated branch. There must be no conflicts (no updates in the current branch). If this is all true, then git updates the current branch pointer, moving it to the commit point of the branch being merged in.



### Fetch
Updates a local branch with the contents of a remote branch.

See also: Pull



### File Status
Modified, Staged, Committed.



### File Status - Committed
The file and it's changes have been committed to the repository.



### File Status - Modified
The file has been changed but not committed.



### File Status - Staged
The file has been changed, and marked by the user to go into the next snapshot.



### Git Directory
The main repository.

It is distributed but each repository location has a copy of the entire repository including the local repository.



### Git URL
Almost always uses an unauthenticated URL.

Typically only read only but git is a special case. It can write too. Uses SSH and works like SCP (file transfer only).
Format: git://



### Git Workflow

1. Checkout Project
2. Modify Files
3. Stage Changed Files
4. Commit Changes



### Git Workflow - Gitflow

Branches:

<card>Feature
Development
Master
Release
Hotfix<>

Atlassian Writeup:

<l>https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow<>



### Git Workflow - Trunk

All development is done on one branch, typically called trunk.

Features can be developed on separate branches but must be committed ofter to the trunk (multiple times a day).
Features should be very small, will be deployed when the trunk is released but are controlled using feature flags.

Branches:

<card>Truck
Feature<>



### Head
The last commit in the currently checked out branch.



### Head, Detached
A head pointer that is pointing to a commit, not a branch.

Fix By:

<*>Checking out a branch (if no changes)
Create a new branch (if changes made)<>



### Merge
Merge merges code from one branch into another.

Merges are done FROM the target branch INTO current branch.
Merge works only if there are no conflicts.

Merge from feature into master:

Before:

<cb>	         F<sub>1<> ─── F<sub>2<>    feature
	        /
	M<sub>1<> ─── M<sub>2<> ─── M<sub>3<>    master (current)<>

After:

<cb>	         F<sub>1<> ───── F<sub>2<>    feature
	        /          \
	M<sub>1<> ─── M<sub>2<> ─── M<sub>3<> ─── M<sub>4<>    master (current)<>



### Objects
Raw data stored as gzip files. Can be one of the commit metadata, the directory listing, the file contents.



### Object Database
Is equivalent to an NSDictionary or a Hash Table / Key-Value Store. The values are the content (blob).



### Origin
'<c>origin<>' is a reference to the original source repository.

Use '<c>origin<>' wherever you would user the full url to the original remote repository.



### Personal Access Token (PAT)
A code generated by your account on Github that is used instead of your password when accessing / updating repos.



### Pull
Pull is a git Fetch, followed by a merge. There is no oppertunity to compare before the merge.



### Pushing
Types: Simple, Matching



### Rebase
Sequentially regenerate a series of commits so they can be applied directly off a particular branch.

Disconnects all commits in the branch.
Then reapplies them one by one.
Conflicts must be addressed by commit.

Never rebase if you have previously pushed your branch to remote.
Rebase changes the commit hash values. This will cause issues in the remone when you re-push.


Command:

<cb>git rebase master<>

Before:

<cb>	         F<sub>1<> <#>─── F<sub>2<><>    feature
	        /
	M<sub>1<> ─── M<sub>2<> <#>─── M<sub>3<><>    master<>

After:

<cb>	                F<sub>1<> <#>─── F<sub>2<><>    feature
	               /
	M<sub>1<> ─── M<sub>2<> ─── M<sub>3<>    master<>


Recommended Video: <l https://www.youtube.com/watch?v=DkWDHzmMvyg>"git rebase - Why, When & How to fix conflicts"<>
by <l https://www.youtube.com/@philomatics/videos>by Philomatics<>, 10 mins



### Repository Concepts
Git Directory (repository), Staging Area, Working Directory.



### SHA1 Digest
This is a standard hashing function.

Hashing functions generates an almost unique number for a piece of data based on it's contents. The number is fixed length and is independent of the data length. The chance of two different pieces of data having the same SHA1 Digest value is incredibly slim.

The hash value is sometimes called the message digest.



### Squash
Combines multiple commits into one.

Useful if you have a lot of small commits you want to combine into one big one.


Before:

<cb>	         F<sub>1<> ─── F<sub>2<> ─── F<sub>3<>    feature
	        /
	M<sub>1<> ─── M<sub>2<>    master<>

After:

<cb>	         F<sub>3<>    feature
	        /
	M<sub>1<> ─── M<sub>2<>    master<>



### Staging Area
An area to stage files before committing them.
It contains the list of files the user has selected to be in the next commit.

Why a staging area?
This allows you the flexibility to decide which files to add to the commit and which ones to leave out.



### Tracked Files
Files that Git tracks changes and commits on.



### Untracked Files
Files ignored by Git.

Files must be deliberately added to the repository. Git will not add new files just because they weren't there before. 



### Working Directory
The project directory with one version of the project checked out.



### Worktrees
These are directories linked to a git project but working on different branches within that project.

Any branch can be checked out only once either into the main git project or into a worktree directory.

Do NOT nest worktree directories inside the main git project directory.

